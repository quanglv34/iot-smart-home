// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  email             String           @unique
  username          String           @unique
  name              String
  password          String
  role              UserRole         @default(USER)
  devices           Thing[]
  ownedProperties   Property[]
  invitedProperties PropertyMember[]
  invitedZones      ZoneMember[]
}

enum PropertyMemberStatus {
  PENDING
  ACCEPTED
}

model PropertyMember {
  id         String               @id @default(auto()) @map("_id") @db.ObjectId
  userId     String               @db.ObjectId
  user       User                 @relation(fields: [userId], references: [id])
  propertyId String               @db.ObjectId
  property   Property             @relation(fields: [propertyId], references: [id])
  status     PropertyMemberStatus @default(PENDING)
}

model Property {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  ownerId     String           @db.ObjectId
  owner       User             @relation(fields: [ownerId], references: [id])
  zones       Zone[]
  members     PropertyMember[]
}

model Zone {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  propertyId  String       @db.ObjectId
  property    Property     @relation(fields: [propertyId], references: [id])
  thingIds    String[]
  members     ZoneMember[]
}

model ZoneMember {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  zoneId String @db.ObjectId
  userId String @db.ObjectId
  zone   Zone   @relation(fields: [zoneId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, zoneId])
}

model Thing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  token       String
  type        Int      @default(0)
  ownerId     String?  @db.ObjectId
  owner       User?    @relation(fields: [ownerId], references: [id])
  logs        Log[]
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      Int
  createdAt DateTime @default(now())
  deviceId  String   @db.ObjectId
  device    Thing    @relation(fields: [deviceId], references: [id])
}
